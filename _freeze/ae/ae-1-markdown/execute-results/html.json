{
  "hash": "80572874c2188806ca24ae3e1a5de6a8",
  "result": {
    "markdown": "---\ntitle: \"Literate programming using R Markdown\"\nauthor: \"MvO\"\ndate: '2023-11-20'\noutput:\n  word_document: default\n  html_document:\n    number_sections: yes\n    toc: yes\n  pdf_document:\n    number_sections: yes\n    toc: yes\nsubtitle: With code examples in R\neditor_options: \n  chunk_output_type: inline\n---\n\n\n# Introduction\nThis document shows some very basic examples of literate programming using R Markdown.\n\n## Literate programming\nLiterate programming = combining *live code* and *text* in one file. Special software is needed to \"weave\" such a file into a nicely readable document that combines the code-output with the text. The only weaving-software that we discuss here is **knitr**, which comes with **RStudio** (the 'integrated development environment', or IDE, for **R**). Use of RStudio is highly recommended: it helps not only with literate programming but also with using and testing any R-code.\n\nSo in our literate prgramming we combine code-chunks written in R with text. To allow knitr to do its magic (i.e. create pretty documents with nice layout etc.), we should follow some rules when writing the text-bits. We choose the rules of the simplest mark-up language, **markdown**. RStudio understands markdown documents.\n\nOnce we have created our code-text mixture, i.e. our markdown-file (with extension .Rmd), we want to use knitr to weave it into something nice. RStudio gives us the options of knitr-export to three different file-types: *HTML*, *pdf*, *Word*.\n\n# Using knitr\n\n## Setting global options\nThe following global options change nothing (they are the defaults):\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo=TRUE,results=\"asis\")\n```\n:::\n\n\nIf you only want the results from R-code-chunks to be shown in the final document, then choose echo=FALSE. Many such options can be set. One important one is cache=TRUE which stores the results of calculations in separate files, and loads them when you re-weave the file. That is useful when you have finished your work on the code-chunks but are busy editing the text-bits, because then the HTML-, pdf- or Word-document are created faster.\n\n## Fonts: italics and bold\nYou can write *text in italics* and **in boldface**.\n\n## Quotes\nA quote is written by starting a line with the > symbol:\n\n> Modellers never write proper documentation!\n\n## Link to a webpage\nA link to a file or website looks like this: [Helophilus pendulus](https://picasaweb.google.com/109778459922622855546/AYearInNorway#5900928803315985026).\n\n## Math equations\nLet's write some mathematics:\n\n> $\\alpha^2+\\beta^2=\\gamma^2$.\n\nSo the \"LaTeX-way\" to write variable names with a subscript or superscript is: $x_2$ and $x^2$. But there is also a markdown way for the superscript: x^2^.\n\nLet's write some more:\n\n\"If r equals 2, then $r^2$ is 4. And $\\pi*r^2$ is 12.5663706.\"\n\nFinally, here is a complicated equation:\n$$ J_\\alpha(x) = \\sum\\limits_{m=0}^\\infty \\frac{(-1)^m}{m! \\, \\Gamma(m + \\alpha + 1)}{\\left({\\frac{x}{2}}\\right)}^{2 m + \\alpha} $$\n\n## Examples of code-chunks\n\nNow we'll show some code-chunks. Each of them consists of a few lines of code in R. RStudio has a drop-down menu that allows you to easily navigate between the code-chunks in your file. The drop-down menu also shows the keyboard shortcuts. Two very useful ones are *Ctrl-Alt-C* for running the current code-chunk, and *Ctrl-Alt-R* for running all of them. If you run code-chunks in such a way, their output will go to the regular places, i.e. the console and the Plots-window. So that is different from weaving the file using knitr, which makes the outputs part of your new external HTML-, pdf- or Word-document. So using these Ctrl-Alt commands is good for testing your code before weaving.\n\n### R-code 1\nLet's have some text first. OK, now the code:\n\n\n```{.r .cell-code}\nset.seed(1)\nx <- rnorm(100)\nmean(x)\n```\n\n[1] 0.1088874\n\n\n### R-code 2\nThis time we use the same R-code but following option: results=\"hide\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nx <- rnorm(100)\nmean(x)\n```\n:::\n\n\nThat second bit of code was evaluated, but no results were shown in the final document.\n\n### R-code 3: inline\nR-code does not have to be placed in code-chunks beginning and ending in ```. Code can also be used inline, as part of a regular text-sentence. In this example we do first use a code-chunk, but just to calculate the variables 'time' and 'rand'. Thereafter the values of those variables can be included inline.\n\n\n\n```{.r .cell-code}\ntime <- format(Sys.time(), \"%a %b %d %X %Y\")\nrand <- rnorm(1)\n```\n\n\nThe time is now Mon Nov 20 16:03:35 2023, and our random number of the day is: -0.6203667.\nAnother example of an inline calculation is this: pi^2 is equal to 9.8696044.\n\n### R-code 4: Creating plots\nLet's first get some numbers to plot:\n\n\n\n```{.r .cell-code}\nx <- rnorm(50); y <- x + rnorm(50,sd=0.3)\n```\n\n\nNow we create a scatterplot of those numbers:\n\n\n```{.r .cell-code}\npar(mar=c(5,4,1,1),las=1)\nplot(x,y,main=\"Some random numbers\")\n```\n\n![](ae-1-markdown_files/figure-html/scatterplot 1-1.png){width=672}\n\n\nNote: if we export to an HTML-file, that plot will embedded! That is good (stand-alone file) and bad (big file).\n\n### R-code 5: Results from statistical analysis\nWe'll get some data that come with R, and fit a linear model:\n\n\n\n```{.r .cell-code}\nlibrary(datasets)\ndata(airquality)\nfit <- lm(Ozone ~ Wind + Temp + Solar.R, data=airquality)\nknitr::kable(anova(fit))\n```\n\n::: {.cell-output-display}\n|          |  Df|    Sum Sq|    Mean Sq|   F value|    Pr(>F)|\n|:---------|---:|---------:|----------:|---------:|---------:|\n|Wind      |   1| 45694.237| 45694.2369| 101.85415| 0.0000000|\n|Temp      |   1| 25118.710| 25118.7095|  55.99054| 0.0000000|\n|Solar.R   |   1|  2986.173|  2986.1731|   6.65629| 0.0112366|\n|Residuals | 107| 48002.790|   448.6242|        NA|        NA|\n:::\n\n\n## Further reading\n* [Karl Broman: \"knitr in a knutshell: a minimal tutorial\"](http://kbroman.org/knitr_knutshell/)\n* [RStudio website: \"R Markdown - Dynamic Documents for R\"](http://rmarkdown.rstudio.com/)\n* [Richard Layton: \"Happy collaboration with Rmd to docx\"](http://rmarkdown.rstudio.com/articles_docx.html)\n* [Dean Attali: \"Knitr's best hidden gem: spin\"](http://deanattali.com/2015/03/24/knitrs-best-hidden-gem-spin/)\n",
    "supporting": [
      "ae-1-markdown_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}